# Pandas 性能优化
    # Pandas 性能优化涉及多个方面，包括数据类型优化、避免不必要的循环、使用向量化操作、优化索引以及分块加载大数据集等方法。


# =================================================================
# 下面我们将详细介绍 Pandas 性能优化的几种方法。

    # 使用适当的数据类型
        # Pandas 中的数据类型（dtype）直接影响内存使用和计算速度。合理选择数据类型可以显著减少内存占用和加速计算。

    # 使用向量化操作而非循环
        # Pandas 的最大优势之一就是其能够利用向量化操作进行快速的批量运算。在 Pandas 中，尽量避免使用 Python 的原生循环，
        # 应该使用 Pandas 内置的函数，这样可以利用底层的优化进行快速计算。

    # 使用 apply() 和 applymap() 优化
        # Pandas 提供了 apply() 和 applymap() 方法，它们可以让你在数据框架中按行或按列应用函数，能够比循环更高效。
    
    # 使用合适的索引
        # Pandas 的索引可以提高数据的查找速度，尤其是在需要进行多次查找或数据合并时，索引可以显著提升效率。对于大数据集，
        # 确保使用适当的索引并减少不必要的索引操作可以提高性能。
 
    # 使用分块加载大数据集
        # 当数据集过大时，加载整个数据集会占用大量内存，甚至导致内存溢出。此时，可以通过分块读取数据来减小内存压力。
        # Pandas 提供了 chunksize 参数，允许在读取 CSV 或 Excel 文件时分块加载数据。
    
    # 通过 numba 加速计算
        # numba 是一个 JIT 编译器，可以将 Python 代码加速。通过将数据处理的代码加速，可以显著提高性能。特别是对于循环、
        # 数值计算等计算密集型操作，numba 可以极大地提高速度。

    # 避免链式赋值
        # 链式赋值（chained assignment）是 Pandas 中常见的性能陷阱之一。它可能导致不必要的副作用，并且通常会减慢执行速度。最好使用
        # 明确的赋值方式，避免在同一行中进行多次赋值。

    # 合并操作优化
        # 当需要将多个 DataFrame 合并时，使用 merge() 或 concat() 时需要注意优化合并操作，特别是在处理大数据集时。可以
        # 使用 on 和 how 参数明确指定合并方式，避免不必要的计算。
# =====================================================================


